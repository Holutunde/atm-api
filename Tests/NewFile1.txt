using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using OnyxDoc.AuthService.Application.Common;
using OnyxDoc.AuthService.Application.Common.Interfaces;
using OnyxDoc.AuthService.Application.Common.Models;
using OnyxDoc.AuthService.Domain.Entities;
using OnyxDoc.AuthService.Domain.Enums;
using OnyxDoc.AuthService.Domain.ViewModels;

namespace OnyxDoc.AuthService.Infrastructure.Identity
{
    public class IdentityService : IIdentityService
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IBase64ToFileConverter _base64ToFileConverter;
        private readonly IEmailService _emailService;
        private readonly IConfiguration _configuration;
        private readonly IApplicationDbContext _context;

        public IdentityService(UserManager<ApplicationUser> userManager, IEmailService emailService, IBase64ToFileConverter base64ToFileConverter, IConfiguration configuration, IApplicationDbContext context)
        {
            _userManager = userManager;
            _base64ToFileConverter = base64ToFileConverter;
            _configuration = configuration;
            _emailService = emailService;
            _context = context;
        }


        public async Task<(Result Result, string UserId)> CreateUserAsync(User user)
        {
            var userDetails = new ApplicationUser
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                CreatedById = user.CreatedById,
                CreatedByEmail = user.CreatedByEmail,
                CreatedDate = user.CreatedDate,
                SubscriberId = user.SubscriberId,
                PhoneNumber = user.PhoneNumber,
                RoleId = user.RoleId,
                UserName = user.Email,
                Status = Domain.Enums.Status.Inactive,
                Country = user.Country,
                City = user.City,
                EmailConfirmed = false,
                ProfilePicture = user.ProfilePicture,
                Token = user.Token,
                UserCreationStatus = user.UserCreationStatus,
                UserCreationStatusDesc = user.UserCreationStatusDesc,
                ThirdPartyType = user.ThirdPartyType
            };
            var result = await _userManager.CreateAsync(userDetails, user.Password);
            if (!result.Succeeded)
            {
                return (Result.Failure(result.Errors.FirstOrDefault().Description), "");
            }
            //update User Id
            userDetails.UserId = userDetails.Id;
            var updatedResult = await _userManager.UpdateAsync(userDetails);
            return (result.ToApplicationResult(), userDetails.Id);
        }

        public async Task<Result> CreateUsersAsync(List<User> users)
        {
            var userDetails = new List<ApplicationUser>();

            foreach (var user in users)
            {
                var entity = new ApplicationUser
                {
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Email = user.Email,
                    CreatedById = user.CreatedById,
                    CreatedByEmail = user.CreatedByEmail,
                    CreatedDate = user.CreatedDate,
                    SubscriberId = user.SubscriberId,
                    PhoneNumber = user.PhoneNumber,
                    RoleId = user.RoleId,
                    UserName = user.Email,
                    Status = Domain.Enums.Status.Inactive,
                    Country = user.Country,
                    City = user.City,
                    EmailConfirmed = false,
                    ProfilePicture = user.ProfilePicture,
                    Token = user.Token,
                    UserCreationStatus = user.UserCreationStatus,
                    UserCreationStatusDesc = user.UserCreationStatusDesc

                };
                userDetails.Add(entity);
                var result = await _userManager.CreateAsync(entity, user.Password);
                CancellationToken token = new CancellationToken();
                await _context.SaveChangesAsync(token);
                if (!result.Succeeded)
                {
                    //return (Result.Failure(result.Errors.First().Description), new List<User>());
                    return (Result.Failure(result.Errors.First().Description));
                }
                //update User Id
                user.UserId = entity.Id;
                await _userManager.UpdateAsync(entity);

            }
            return (Result.Success());
        }

        public async Task<Result> ChangeUserStatusAsync(User user)
        {
            var appUser = await _userManager.Users.FirstOrDefaultAsync(a => a.Id == user.UserId);
            string message = "";
            if (appUser != null)
            {
                switch (appUser.Status)
                {
                    case Domain.Enums.Status.Active:
                        appUser.Status = Domain.Enums.Status.Inactive;
                        message = "User deactivation was successful";
                        break;
                    case Domain.Enums.Status.Inactive:
                        appUser.Status = Domain.Enums.Status.Active;
                        message = "User activation was successful";
                        break;
                    case Domain.Enums.Status.Deactivated:
                        appUser.Status = Domain.Enums.Status.Active;
                        message = "User activation was successful";
                        break;
                    default:
                        break;
                }
                if (appUser.UserCreationStatus == Domain.Enums.UserCreationStatus.AccessRequest)
                {
                    message = message + ".View user details to approve or reject access!";
                }
            };
            return await ChangeUserStatusAsync(appUser, message);
        }

        public async Task<Result> ChangeUsersStatusAsync(List<UserIdVm> UsersId)
        {
            //List<ApplicationUser> users = new List<ApplicationUser>();

            string message = "";
            foreach (var userItem in UsersId)
            {
                var appUser = await _userManager.Users.FirstOrDefaultAsync(a => a.Id == userItem.UserId);
                if (appUser == null)
                {
                    return Result.Failure($"User with this userId {appUser.UserId} does not exist");
                }

                switch (appUser.Status)
                {
                    case Domain.Enums.Status.Active:
                        appUser.Status = Domain.Enums.Status.Inactive;
                        message = "User deactivation was successful";
                        var result = await _userManager.UpdateAsync(appUser);
                        CancellationToken token = new CancellationToken();
                        await _context.SaveChangesAsync(token);
                        break;
                    case Domain.Enums.Status.Inactive:
                        appUser.Status = Domain.Enums.Status.Active;
                        message = "User activation was successful";
                        var resultForInactiveStatus = await _userManager.UpdateAsync(appUser);
                        CancellationToken tokenForInactiveStatus = new CancellationToken();
                        await _context.SaveChangesAsync(tokenForInactiveStatus);
                        break;
                    case Domain.Enums.Status.Deactivated:
                        appUser.Status = Domain.Enums.Status.Active;
                        message = "User activation was successful";
                        var resultForDeactivatedStatus = await _userManager.UpdateAsync(appUser);
                        CancellationToken tokenForDeactivatedStatus = new CancellationToken();
                        await _context.SaveChangesAsync(tokenForDeactivatedStatus);
                        break;
                    default:
                        break;
                }
                if (appUser.UserCreationStatus == Domain.Enums.UserCreationStatus.AccessRequest)
                {
                    message = message + ".View user details to approve or reject access!";
                }
            }

            /*
            string message = "";
            foreach (var appUser in users)
            {

                if (appUser != null)
                {
                    switch (appUser.Status)
                    {
                        case Domain.Enums.Status.Active:
                            appUser.Status = Domain.Enums.Status.Inactive;
                            message = "User deactivation was successful";
                            var result = await _userManager.UpdateAsync(appUser);
                            CancellationToken token = new CancellationToken();
                            await _context.SaveChangesAsync(token);
                            break;
                        case Domain.Enums.Status.Inactive:
                            appUser.Status = Domain.Enums.Status.Active;
                            message = "User activation was successful";
                            var resultForInactiveStatus = await _userManager.UpdateAsync(appUser);
                            CancellationToken tokenForInactiveStatus = new CancellationToken();
                            await _context.SaveChangesAsync(tokenForInactiveStatus);
                            break;
                        case Domain.Enums.Status.Deactivated:
                            appUser.Status = Domain.Enums.Status.Active;
                            message = "User activation was successful";
                            var resultForDeactivatedStatus = await _userManager.UpdateAsync(appUser);
                            CancellationToken tokenForDeactivatedStatus = new CancellationToken();
                            await _context.SaveChangesAsync(tokenForDeactivatedStatus);
                            break;
                        default:
                            break;
                    }
                };
            }*/

            return Result.Success(message);
        }

        public async Task<Result> ChangeUserStatusAsync(ApplicationUser user, string message)
        {
            var result = await _userManager.UpdateAsync(user);
            CancellationToken token = new CancellationToken();
            await _context.SaveChangesAsync(token);
            if (result.Succeeded)
                return Result.Success(message);
            else
                return Result.Failure(result.ToApplicationResult().Messages);
        }

        public async Task<Result> UpdateUserAsync(User user)
        {
            var userToUpdate = await _userManager.Users.FirstOrDefaultAsync(u => u.Id == user.UserId);
            if (userToUpdate == null)
            {
                return Result.Failure("User for update does not exist");
            }
            userToUpdate.FirstName = user.FirstName;
            userToUpdate.LastName = user.LastName;
            userToUpdate.Email = user.Email;
            userToUpdate.CreatedById = user.CreatedById;
            userToUpdate.CreatedByEmail = user.CreatedByEmail;
            userToUpdate.CreatedDate = user.CreatedDate;
            userToUpdate.SubscriberId = user.SubscriberId;
            userToUpdate.PhoneNumber = user.PhoneNumber;
            userToUpdate.RoleId = user.RoleId;
            userToUpdate.Token = user.Token;
            userToUpdate.HasDocumentPin = user.HasDocumentPin;
            userToUpdate.DepartmentId = user?.DepartmentId;
            userToUpdate.DivisionId = user?.DivisionId;
            userToUpdate.UnitId = user?.UnitId;
            userToUpdate.DocumentPin = user.DocumentPin;
            userToUpdate.DocumentPinResetDate = user.DocumentPinResetDate;
            userToUpdate.Status = user.Status;
            userToUpdate.Country = user.Country;
            userToUpdate.City = user.City;
            userToUpdate.ProfilePicture = user.ProfilePicture;
            userToUpdate.Signature = user.Signature;
            userToUpdate.JobTitle = user.JobTitle;
            userToUpdate.UserCreationStatus = user.UserCreationStatus;
            userToUpdate.UserCreationStatusDesc = user.UserCreationStatusDesc;
            userToUpdate.DocumentSecurityType = user.DocumentSecurityType;
            userToUpdate.DocumentSecurityTypeDesc= user.DocumentSecurityTypeDesc;
            //update password
            var token = await _userManager.GeneratePasswordResetTokenAsync(userToUpdate);
            var res = user.Password == null ? null : await _userManager.ResetPasswordAsync(userToUpdate, token, user.Password);
            var result = await _userManager.UpdateAsync(userToUpdate);
            CancellationToken cancelToken = new CancellationToken();
            await _context.SaveChangesAsync(cancelToken);
            return Result.Success("User was updated successfully");
        }


        public async Task<Result> DeleteUserAsync(string userId)
        {
            var userToUpdate = await _userManager.Users.FirstOrDefaultAsync(u => u.Id == userId);
            if (userToUpdate != null)
            {
                await _userManager.DeleteAsync(userToUpdate);
            }

            return Result.Success("User was deleted successfully");
        }

        public async Task<(Result result, List<User> users)> GetAll(int skip, int take)
        {

            List<User> users = new List<User>();
            List<ApplicationUser> appUsers = new();
            if (skip == 0 || take == 0)
            {
                appUsers = await _userManager.Users.ToListAsync();
            }
            else
            {
                appUsers = await _userManager.Users.Skip(skip)
                                 .Take(take).ToListAsync();
            }


            if (appUsers == null)
            {
                return (Result.Failure(new string[] { "No users exist on the system" }), null);
            }

            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastLoginDate = appUser.LastLoginDate;
                user.LastName = appUser.LastName;
                user.Name = appUser.FirstName + " " + " " + appUser?.LastName ?? " ";
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.UnitId = appUser?.UnitId;
                user.DivisionId = appUser?.DivisionId;
                user.Status = appUser.Status;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.ProfilePicture = appUser.ProfilePicture;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.City = appUser.City;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }
            return (Result.Success(), users);
        }

        public async Task<(Result result, List<User> users, int count)> GetAllActiveUsers(int skip, int take, int subscriberId, string[] filterValue, string searchValue)
        {

            List<User> users = new List<User>();
            List<ApplicationUser> appUsers;
            int count = 0;

            appUsers = await _userManager.Users.Where(a => a.Status == Domain.Enums.Status.Active && a.SubscriberId == subscriberId
                && a.UserCreationStatus == UserCreationStatus.Approved)
                    .OrderByDescending(a => a.CreatedDate).ToListAsync();
            count = appUsers.Count;

            var roles = await _context.Roles.ToListAsync();
            foreach (var user in appUsers)
            {
                user.Role = roles.FirstOrDefault(a => a.Id == user.RoleId);
            }

            if (filterValue != null && filterValue.Any() && !string.IsNullOrEmpty(searchValue))
            {
                appUsers = FilteredRecords(appUsers, searchValue, filterValue);
                count = appUsers.Count;
            }

            else if (!string.IsNullOrEmpty(searchValue))
            {
                appUsers = SearchRecords(appUsers, searchValue);
                count = appUsers.Count;
            }

            if (skip > 0 || take > 0)
            {
                appUsers = appUsers.Skip(skip).Take(take).ToList();
            }

            if (!appUsers.Any())
            {
                return (Result.Failure("No active users exist on the system"), null, 0);
            }

            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastLoginDate = appUser.LastLoginDate;
                user.LastName = appUser.LastName;
                user.Name = appUser.FirstName + " " + " " + appUser?.LastName ?? " ";
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Role = appUser.Role;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.UnitId = appUser?.UnitId;
                user.DivisionId = appUser?.DivisionId;
                user.Status = appUser.Status;
                user.StatusDesc = appUser.Status.ToString();
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.ProfilePicture = appUser.ProfilePicture;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.City = appUser.City;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }
            return (Result.Success(), users, count);
        }

        private List<ApplicationUser> SearchRecords(List<ApplicationUser> users, string searchValue)
        {
            if (users == null || users.Count == 0)
            {
                return users;
            }

            List<ApplicationUser> usersSearchResult = users.Where(a =>
            (a.FirstName != null && a.FirstName.ToLower().Contains(searchValue.ToLower()))
            || (a.LastName != null && a.LastName.ToLower().Contains(searchValue.ToLower()))
            || (a.Role != null && a.Role.Name != null && a.Role.Name.ToLower().Contains(searchValue.ToLower()))
            || (a.Email != null && a.Email.ToLower().Contains(searchValue.ToLower()))).ToList();

            return usersSearchResult.Distinct().ToList();
        }

        private List<ApplicationUser> FilteredRecords(List<ApplicationUser> users, string searchValue, string[] filterType)
        {
            if (filterType == null && !filterType.Any()) return SearchRecords(users, searchValue);

            if (users == null || users.Count == 0)
            {
                return users;
            }

            List<ApplicationUser> usersSearchResult = new List<ApplicationUser>();
            foreach (var filterValue in filterType)
            {

                if (string.IsNullOrEmpty(filterValue)) continue;
                UserFilterValueType parsedEnum;

                if (Enum.TryParse(filterValue, out parsedEnum))
                {
                    switch (parsedEnum)
                    {
                        case UserFilterValueType.firstName:
                            List<ApplicationUser> filterByFirstNameList = users.Where(c => c.FirstName != null && c.FirstName.ToLower().Contains(searchValue.ToLower())).ToList();
                            if (filterByFirstNameList.Any()) usersSearchResult.AddRange(filterByFirstNameList);
                            break;
                        case UserFilterValueType.role:
                            List<ApplicationUser> filterByRoleList = users.Where(c => c.Role.Name != null && c.Role.Name.ToLower().Contains(searchValue.ToLower())).ToList();
                            if (filterByRoleList.Any()) usersSearchResult.AddRange(filterByRoleList);
                            break;
                        case UserFilterValueType.email:
                            List<ApplicationUser> filterByEmailList = users.Where(c => c.Email != null && c.Email.ToLower().Contains(searchValue.ToLower())).ToList();
                            if (filterByEmailList.Any()) usersSearchResult.AddRange(filterByEmailList);
                            break;
                        case UserFilterValueType.lastName:
                            List<ApplicationUser> filterbyLastNameList = users.Where(c => c.LastName != null && c.LastName.ToLower().Contains(searchValue.ToLower())).ToList();
                            if (filterbyLastNameList.Any()) usersSearchResult.AddRange(filterbyLastNameList);
                            break;
                        default:
                            break;
                    }
                }
            }
            return usersSearchResult.Distinct().ToList();
        }

        public async Task<(Result result, List<User> users, int count)> GetAllInActiveUsers(int skip, int take, int subscriberId, string[] filterValue, string searchValue)
        {

            List<User> users = new List<User>();
            List<ApplicationUser> appUsers = new List<ApplicationUser>();
            int count = 0;

            appUsers = await _userManager.Users.Where(a => a.Status == Status.Inactive
               && a.SubscriberId == subscriberId).OrderByDescending(a => a.CreatedDate).ToListAsync();
            count = appUsers.Count;

            var roles = await _context.Roles.ToListAsync();
            foreach (var user in appUsers)
            {
                user.Role = roles.FirstOrDefault(a => a.Id == user.RoleId);
            }

            if (filterValue != null && filterValue.Any())
            {
                appUsers = FilteredRecords(appUsers, searchValue, filterValue);
                count = appUsers.Count;
            }

            else if (!string.IsNullOrEmpty(searchValue))
            {
                appUsers = SearchRecords(appUsers, searchValue);
                count = appUsers.Count;
            }

            if (skip > 0 || take > 0)
            {
                appUsers = appUsers.Skip(skip).Take(take).ToList();
            }

            if (appUsers == null)
            {
                return (Result.Failure(new string[] { "No active users exist on the system" }), null, 0);
            }

            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastLoginDate = appUser.LastLoginDate;
                user.LastName = appUser.LastName;
                user.Name = appUser.FirstName + " " + " " + appUser?.LastName ?? " ";
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Role = appUser.Role;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.UnitId = appUser?.UnitId;
                user.DivisionId = appUser?.DivisionId;
                user.Status = appUser.Status;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.ProfilePicture = appUser.ProfilePicture;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.City = appUser.City;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }
            return (Result.Success(), users, count);
        }

        public async Task<(Result Result, User user)> GetUserById(string userId)
        {
            // var user = await _userManager.Users.FirstOrDefaultAsync(u => u.Id == userId);
            var existingUser = await _userManager.FindByIdAsync(userId);
            if (existingUser == null)
            {
                return (Result.Failure($"User does not exist with Id: {userId}"), null);
            }
            var user = new User
            {
                UserId = existingUser.Id,
                FirstName = existingUser.FirstName,
                LastName = existingUser.LastName,
                Email = existingUser.UserName,
                CreatedById = existingUser.CreatedById,
                CreatedByEmail = existingUser.CreatedByEmail,
                CreatedDate = existingUser.CreatedDate,
                SubscriberId = existingUser.SubscriberId,
                PhoneNumber = existingUser.PhoneNumber,
                RoleId = existingUser.RoleId,
                Signature = existingUser.Signature,
                JobTitle = existingUser.JobTitle,
                Status = existingUser.Status,
                Country = existingUser.Country,
                City = existingUser.City,
                HasDocumentPin = existingUser.HasDocumentPin,
                DepartmentId = existingUser?.DepartmentId,
                DivisionId = existingUser?.DivisionId,
                UnitId = existingUser?.UnitId,
                DocumentPin = existingUser.DocumentPin,
                DocumentPinResetDate = existingUser.DocumentPinResetDate,
                ProfilePicture = existingUser.ProfilePicture,
                UserCreationStatus = existingUser.UserCreationStatus,
                UserCreationStatusDesc = existingUser.UserCreationStatusDesc,
                EmailConfirmed = existingUser.EmailConfirmed,
                DocumentSecurityType= existingUser.DocumentSecurityType,
                DocumentSecurityTypeDesc = existingUser.DocumentSecurityTypeDesc
            };

            return (Result.Success(), user);
        }

        public async Task<(Result Result, List<User> users)> GetUsersByRoleId(int roleId)
        {
            var users = new List<User>();

            var appUsers = await _userManager.Users.Where(a => a.RoleId == roleId).ToListAsync();
            if (appUsers == null || appUsers.Count == 0)
            {
                return (Result.Failure($"No user found for this role Id: {roleId}"), null);
            }
            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.DivisionId = appUser?.DivisionId;
                user.UnitId = appUser?.UnitId;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }

            return (Result.Success(), users);
        }



        public async Task<(Result result, List<User> users)> GetUsersBySubscriberId(int subscriberId, string searchValue, string[] filterValue)
        {
            var users = new List<User>();

            var appUsers = await _userManager.Users.Where(u => u.SubscriberId == subscriberId).ToListAsync();
            if (appUsers == null)
            {
                return (Result.Failure($"Users does not exist"), null);
            }
            var roles = await _context.Roles.ToListAsync();
            foreach (var user in appUsers)
            {
                user.Role = roles.FirstOrDefault(a => a.Id == user.RoleId);
            }

            if (filterValue != null && filterValue.Any())
            {
                appUsers = FilteredRecords(appUsers, searchValue, filterValue);
            }

            else if (!string.IsNullOrEmpty(searchValue))
            {
                appUsers = SearchRecords(appUsers, searchValue);
            }

            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Role = appUser.Role;
                user.Status = appUser.Status;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.DivisionId = appUser?.DivisionId;
                user.UnitId = appUser?.UnitId;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                user.LastLoginDate = appUser.LastLoginDate;
                users.Add(user);
            }

            return (Result.Success(), users);
        }

        public async Task<(Result result, List<User> users)> GetUsersByUserId(List<UserIdVm> UsersId)
        {
            var users = new List<User>();

            List<ApplicationUser> appUsers = new List<ApplicationUser>();

            foreach (var userId in UsersId)
            {
                var appUser = await _userManager.Users.FirstOrDefaultAsync(u => u.UserId == userId.UserId);
                if (appUsers == null)
                {
                    return (Result.Failure($"Users does not exist"), null);
                }
                //appUsers.Add(appUser);

                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.DivisionId = appUser?.DivisionId;
                user.UnitId = appUser?.UnitId;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }

            /*
            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }*/
            return (Result.Success(), users);
        }

        public async Task<(Result Result, User user)> GetUserByRoleId(int roleId)
        {
            var existingUser = await _userManager.Users.FirstOrDefaultAsync(u => u.RoleId == roleId);
            if (existingUser == null)
            {
                return (Result.Failure($"User does not exist with role Id: {roleId}"), null);
            }
            var user = new User
            {
                UserId = existingUser.Id,
                FirstName = existingUser.FirstName,
                LastName = existingUser.LastName,
                Email = existingUser.UserName,
                CreatedById = existingUser.CreatedById,
                CreatedByEmail = existingUser.CreatedByEmail,
                CreatedDate = existingUser.CreatedDate,
                SubscriberId = existingUser.SubscriberId,
                PhoneNumber = existingUser.PhoneNumber,
                RoleId = existingUser.RoleId,
                Status = existingUser.Status,
                HasDocumentPin = existingUser.HasDocumentPin,
                DepartmentId = existingUser?.DepartmentId,
                DivisionId = existingUser?.DivisionId,
                UnitId = existingUser?.UnitId,
                Country = existingUser.Country,
                City = existingUser.City,
                Signature = existingUser.Signature,
                JobTitle = existingUser.JobTitle,
                ProfilePicture = existingUser.ProfilePicture,
                UserCreationStatus = existingUser.UserCreationStatus,
                UserCreationStatusDesc = existingUser.UserCreationStatusDesc,
                EmailConfirmed = existingUser.EmailConfirmed
            };

            return (Result.Success(), user);
        }

        public async Task<(Result Result, User user)> GetUserByUsername(string userName)
        {
            var existingUser = await _userManager.Users.FirstOrDefaultAsync(u => u.UserName == userName);
            if (existingUser == null)
            {
                return (Result.Failure($"User does not exist with username: {userName}"), null);
            }
            var user = new User
            {
                UserId = existingUser.Id,
                FirstName = existingUser.FirstName,
                LastName = existingUser.LastName,
                Email = existingUser.UserName,
                CreatedById = existingUser.CreatedById,
                CreatedByEmail = existingUser.CreatedByEmail,
                CreatedDate = existingUser.CreatedDate,
                SubscriberId = existingUser.SubscriberId,
                PhoneNumber = existingUser.PhoneNumber,
                RoleId = existingUser.RoleId,
                Status = existingUser.Status,
                Country = existingUser.Country,
                HasDocumentPin = existingUser.HasDocumentPin,
                DepartmentId = existingUser?.DepartmentId,
                DivisionId = existingUser?.DivisionId,
                UnitId = existingUser?.UnitId,
                City = existingUser.City,
                ProfilePicture = existingUser.ProfilePicture,
                Signature = existingUser.Signature,
                JobTitle = existingUser.JobTitle,
                UserCreationStatus = existingUser.UserCreationStatus,
                UserCreationStatusDesc = existingUser.UserCreationStatusDesc,
                EmailConfirmed = existingUser.EmailConfirmed
            };

            return (Result.Success(), user);
        }

        public async Task<Result> CheckUserEmailBySubscriberId(string email, int subscriberId)
        {
            var existingUser = await _userManager.Users.FirstOrDefaultAsync(u => u.Email == email && u.SubscriberId == subscriberId);
            if (existingUser == null)
            {
                return Result.Failure($"User does not exist with email: {email}");
            }

            return Result.Success("user exist", existingUser);
        }

        public async Task<(Result Result, string userName)> GetUserNameAsync(string userId)
        {
            var user = await _userManager.Users.FirstOrDefaultAsync(u => u.Id == userId);

            return (Result.Success(), user?.UserName);
        }

        public async Task<(Result Result, User user)> GetUserByIdAndSubscriber(string userId, int SubscriberId)
        {
            var user = new User();
            var existingUser = await _userManager.Users.FirstOrDefaultAsync(u => u.SubscriberId == SubscriberId && u.Id == userId);
            if (existingUser == null)
            {
                return (Result.Failure("Invalid user and subscriber credentials!"), null);
            }
            var roles = await _context.Roles.ToListAsync();
            existingUser.Role = roles.FirstOrDefault(a => a.Id == existingUser.RoleId);
            user = new User
            {
                UserId = existingUser.Id,
                FirstName = existingUser.FirstName,
                LastName = existingUser.LastName,
                Email = existingUser.Email,
                CreatedById = existingUser.CreatedById,
                CreatedByEmail = existingUser.CreatedByEmail,
                CreatedDate = existingUser.CreatedDate,
                SubscriberId = existingUser.SubscriberId,
                PhoneNumber = existingUser.PhoneNumber,
                RoleId = existingUser.RoleId,
                Role = existingUser.Role,
                Status = existingUser.Status,
                HasDocumentPin = existingUser.HasDocumentPin,
                DivisionId = existingUser.DivisionId,
                UnitId = existingUser.UnitId,
                DepartmentId = existingUser.DepartmentId,
                Country = existingUser.Country,
                City = existingUser.City,
                ProfilePicture = existingUser.ProfilePicture,
                Signature = existingUser.Signature,
                JobTitle = existingUser.JobTitle,
                UserCreationStatus = existingUser.UserCreationStatus,
                UserCreationStatusDesc = existingUser.UserCreationStatusDesc,
                EmailConfirmed = existingUser.EmailConfirmed
            };
            return (Result.Success(), user);
        }

        public async Task<(Result Result, User user, Subscriber subscriber, Role role)> GetUserOrgAndRoles(string userId, int SubscriberId)
        {
            var user = new User();
            var subscriber = new Subscriber();
            var role = new Role();
            var existingUser = await _userManager.Users.FirstOrDefaultAsync(u => u.SubscriberId == SubscriberId && u.Id == userId);
            if (existingUser != null)
            {
                user = new User
                {
                    UserId = existingUser.Id,
                    FirstName = existingUser.FirstName,
                    LastName = existingUser.LastName,
                    Email = existingUser.Email,
                    CreatedById = existingUser.CreatedById,
                    CreatedByEmail = existingUser.CreatedByEmail,
                    CreatedDate = existingUser.CreatedDate,
                    SubscriberId = existingUser.SubscriberId,
                    HasDocumentPin = existingUser.HasDocumentPin,
                    DepartmentId = existingUser?.DepartmentId,
                    UnitId = existingUser?.UnitId,
                    DivisionId = existingUser?.DivisionId,
                    PhoneNumber = existingUser.PhoneNumber,
                    RoleId = existingUser.RoleId,
                    Status = existingUser.Status,
                    Country = existingUser.Country,
                    City = existingUser.City,
                    ProfilePicture = existingUser.ProfilePicture,
                    Signature = existingUser.Signature,
                    JobTitle = existingUser.JobTitle,
                    UserCreationStatus = existingUser.UserCreationStatus,
                    UserCreationStatusDesc = existingUser.UserCreationStatusDesc,
                    EmailConfirmed = existingUser.EmailConfirmed
                };
                subscriber = await _context.Subscribers.FirstOrDefaultAsync(u => u.Id == user.SubscriberId);
                role = await _context.Roles.FirstOrDefaultAsync(u => u.Id == user.RoleId);
            }

            return (Result.Success(), user, subscriber, role);
        }

        public async Task<(Result result, List<User> users, int count)> GetUsersBySubscriberId(int SubscriberId, int take, int skip)
        {
            var users = new List<User>();
            int count = 0;
            List<ApplicationUser> appUsers = await _userManager.Users.Where(u => u.SubscriberId == SubscriberId).OrderByDescending(a => a.CreatedDate).ToListAsync();
            var paginatedUsers = appUsers.Paginate(skip, take);
            count = appUsers.Count();

            foreach (var appUser in paginatedUsers.PageItems)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DivisionId = appUser?.DivisionId;
                user.DepartmentId = appUser?.DepartmentId;
                user.UnitId = appUser?.UnitId;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }
            return (Result.Success(), users, count);
        }

        public async Task<(Result result, List<User> users, int count)> GetUsersByUserCreationStatus(int SubscriberId, UserCreationStatus userCreationStatus, int take, int skip, string[] filterValue, string searchValue)
        {
            var users = new List<User>();
            int count = 0;
            List<ApplicationUser> appUsers = await _userManager.Users.Where(u => u.SubscriberId == SubscriberId && u.UserCreationStatus == userCreationStatus).OrderByDescending(a => a.CreatedDate).ToListAsync();
            count = appUsers.Count;
            var roles = await _context.Roles.ToListAsync();
            foreach (var user in appUsers)
            {
                user.Role = roles.FirstOrDefault(a => a.Id == user.RoleId);
            }

            if (filterValue != null && filterValue.Any() && !string.IsNullOrEmpty(searchValue))
            {
                appUsers = FilteredRecords(appUsers, searchValue, filterValue);
                count = appUsers.Count;
            }

            else if (!string.IsNullOrEmpty(searchValue))
            {
                appUsers = SearchRecords(appUsers, searchValue);
                count = appUsers.Count;
            }

            if (skip > 0 || take > 0)
            {
                appUsers = appUsers.Skip(skip).Take(take).ToList();
            }

            foreach (var appUser in appUsers)
            {
                User user = new User
                {
                    UserId = appUser.Id,
                    CreatedById = appUser.CreatedById,
                    CreatedByEmail = appUser.CreatedByEmail,
                    CreatedDate = appUser.CreatedDate,
                    Email = appUser.Email,
                    FirstName = appUser.FirstName,
                    LastName = appUser.LastName,
                    SubscriberId = appUser.SubscriberId,
                    PhoneNumber = appUser.PhoneNumber,
                    HasDocumentPin = appUser.HasDocumentPin,
                    DivisionId = appUser?.DivisionId,
                    DepartmentId = appUser?.DepartmentId,
                    UnitId = appUser?.UnitId,
                    RoleId = appUser.RoleId,
                    Role = appUser.Role,
                    Status = appUser.Status,
                    LastModifiedById = appUser.LastModifiedById,
                    LastModifiedByEmail = appUser.LastModifiedByEmail,
                    LastModifiedDate = appUser.LastModifiedDate,
                    Country = appUser.Country,
                    Signature = appUser.Signature,
                    JobTitle = appUser.JobTitle,
                    City = appUser.City,
                    ProfilePicture = appUser.ProfilePicture,
                    UserCreationStatus = appUser.UserCreationStatus,
                    UserCreationStatusDesc = appUser.UserCreationStatusDesc,
                    EmailConfirmed = appUser.EmailConfirmed
                };
                users.Add(user);
            }
            return (Result.Success(), users, count);
        }

        public async Task<(Result result, List<User> users)> GetActiveUsersBySubscriberId(int SubscriberId, int take, int skip)
        {
            var users = new List<User>();
            List<ApplicationUser> appUsers = new List<ApplicationUser>();
            if (skip == 0 || take == 0)
            {
                appUsers = await _userManager.Users.Where(u => u.SubscriberId == SubscriberId && u.Status == Domain.Enums.Status.Active).ToListAsync();
            }
            else
            {
                appUsers = await _userManager.Users.Where(u => u.SubscriberId == SubscriberId && u.Status == Domain.Enums.Status.Active).Skip(skip)
                                  .Take(take).ToListAsync();
            }

            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DivisionId = appUser?.DivisionId;
                user.DepartmentId = appUser?.DepartmentId;
                user.UnitId = appUser?.UnitId;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }
            return (Result.Success(), users);
        }
        public async Task<(Result Result, User user)> GetUserByEmail(string email)
        {
            var appUser = await _userManager.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (appUser == null)
            {
                return (Result.Failure($"User does not exist with email: {email}"), null);
            }
            var user = new User
            {
                UserId = appUser.Id,
                CreatedById = appUser.CreatedById,
                CreatedByEmail = appUser.CreatedByEmail,
                CreatedDate = appUser.CreatedDate,
                Email = appUser.Email,
                FirstName = appUser.FirstName,
                LastName = appUser.LastName,
                SubscriberId = appUser.SubscriberId,
                HasDocumentPin = appUser.HasDocumentPin,
                DocumentPinResetDate = appUser.DocumentPinResetDate,
                PhoneNumber = appUser.PhoneNumber,
                ProfilePicture = appUser.ProfilePicture,
                DepartmentId = appUser?.DepartmentId,
                UnitId = appUser?.UnitId,
                DivisionId = appUser.DivisionId,
                Signature = appUser.Signature,
                JobTitle = appUser.JobTitle,
                RoleId = appUser.RoleId,
                Status = appUser.Status,
                LastModifiedById = appUser.LastModifiedById,
                LastModifiedByEmail = appUser.LastModifiedByEmail,
                LastModifiedDate = appUser.LastModifiedDate,
                Country = appUser.Country,
                City = appUser.City,
                Token = appUser.Token,
                UserCreationStatus = appUser.UserCreationStatus,
                UserCreationStatusDesc = appUser.UserCreationStatusDesc,
                EmailConfirmed = appUser.EmailConfirmed
            };

            return (Result.Success(), user);
        }

        public async Task<(Result Result, Dictionary<string, string>)> GetUsersByEmails(int subscriberId, List<string> userEmails)
        {
            Dictionary<string, string> profilePicturesDict = new Dictionary<string, string>();

            foreach (string email in userEmails.Distinct())
            {
                ApplicationUser appUser = await _userManager.Users.FirstOrDefaultAsync(u => u.Email == email);
                if (appUser == null)
                {
                    profilePicturesDict.Add(email, null);
                }
                else
                {
                    profilePicturesDict.Add(appUser.Email, appUser.ProfilePicture);
                }
            }
            return (Result.Success(), profilePicturesDict);
        }

        public async Task<(Result Result, User user)> GetUserByIdSubscriberAndPermissions(string userId, int SubscriberId, int accessLevelId)
        {
           return await GetUserByIdAndSubscriber(userId, SubscriberId);
        }


        public async Task<Result> VerifyEmailAsync(User user, string token)
        {
            var verifyUser = await _userManager.FindByEmailAsync(user.Email.Trim());
            if (verifyUser == null)
            {
                return Result.Failure("User does not exist");
            }
            string message = "Email verified successfully";
            if (verifyUser.EmailConfirmed)
            {
                return Result.Success(message);
            }
            if (verifyUser.Token != token)
            {
                return Result.Failure("Error verifying user account, token invalid");
            }

            verifyUser.Status = Domain.Enums.Status.Active;
            verifyUser.EmailConfirmed = true;

            if (verifyUser.ThirdPartyType.HasValue)
            {
                message = $"Email verified successfully. Please click the {verifyUser.ThirdPartyType.Value.ToString()} button to sign in!";
            }

            await _userManager.UpdateAsync(verifyUser);
            if (verifyUser.UserCreationStatus == Domain.Enums.UserCreationStatus.Invited)
            {
                return Result.Success(message);
            }
            //send welcome email after verification
            var subscriberDetail = await _context.Subscribers.FirstOrDefaultAsync(a => a.Id == user.SubscriberId);
            string webDomain = _configuration["WebDomain"];
            var email = new EmailVm
            {
                Application = "Flowmono",
                Subject = $"Welcome to Flowmono {subscriberDetail.Name}",
                BCC = "",
                CC = "",
                RecipientEmail = subscriberDetail.ContactEmail,
                FirstName = subscriberDetail.Name,
                Body = $"Congratulations! your account has just been created successfully. <br> We are glad to have you onboard and can't wait for you to start exploring.",
                ButtonText = "Login Now",
                ButtonLink = webDomain + "login",
                SubscriberName = subscriberDetail.Name,
                SubscriberId = subscriberDetail.SubscriberId
            };
            await _emailService.SendEmail(email);
            return Result.Success(message);
        }

        public async Task<(bool success, string token)> GenerateEmailToken(string email)
        {
            var user = await _userManager.FindByEmailAsync(email);
            if (user == null)
            {
                return (false, "");
            }
            var emailToken = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            if (emailToken != null)
            {
                return (true, emailToken);
            }
            return (false, "");
        }

        public async Task<Result> CountActiveUsers(int subscriberId)
        {
            var activeUsers = await _userManager.Users.Where(a => a.Status == Domain.Enums.Status.Active && a.SubscriberId == subscriberId).ToListAsync();
            var userCounts = activeUsers.Count();
            return Result.Success(userCounts);
        }

        public async Task<(Result result, List<User> users)> GetUsersByDivisionId(int divisionId)
        {
            var users = new List<User>();

            var appUsers = await _userManager.Users.Where(a => a.DivisionId == divisionId).ToListAsync();
            if (appUsers == null || appUsers.Count == 0)
            {
                return (Result.Failure($"No user found for this division Id: {divisionId}"), null);
            }
            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.DivisionId = appUser?.DivisionId;
                user.UnitId = appUser?.UnitId;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }

            return (Result.Success(), users);
        }

        public async Task<(Result result, List<User> users)> GetUsersByUnitId(int unitId)
        {
            var users = new List<User>();

            var appUsers = await _userManager.Users.Where(a => a.UnitId == unitId).ToListAsync();
            if (appUsers == null || appUsers.Count == 0)
            {
                return (Result.Failure($"No user found for this unit Id: {unitId}"), null);
            }
            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.DivisionId = appUser?.DivisionId;
                user.UnitId = appUser?.UnitId;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }

            return (Result.Success(), users);
        }

        public async Task<(Result result, List<User> users)> GetUsersByDepartmentId(int departmentId)
        {
            var users = new List<User>();

            var appUsers = await _userManager.Users.Where(a => a.DepartmentId == departmentId).ToListAsync();
            if (appUsers == null || appUsers.Count == 0)
            {
                return (Result.Failure($"No user found for this department Id: {departmentId}"), null);
            }
            foreach (var appUser in appUsers)
            {
                User user = new User();
                user.UserId = appUser.Id;
                user.CreatedById = appUser.CreatedById;
                user.CreatedByEmail = appUser.CreatedByEmail;
                user.CreatedDate = appUser.CreatedDate;
                user.Email = appUser.Email;
                user.FirstName = appUser.FirstName;
                user.LastName = appUser.LastName;
                user.SubscriberId = appUser.SubscriberId;
                user.PhoneNumber = appUser.PhoneNumber;
                user.RoleId = appUser.RoleId;
                user.Status = appUser.Status;
                user.HasDocumentPin = appUser.HasDocumentPin;
                user.DepartmentId = appUser?.DepartmentId;
                user.DivisionId = appUser?.DivisionId;
                user.UnitId = appUser?.UnitId;
                user.LastModifiedById = appUser.LastModifiedById;
                user.LastModifiedByEmail = appUser.LastModifiedByEmail;
                user.LastModifiedDate = appUser.LastModifiedDate;
                user.Country = appUser.Country;
                user.Signature = appUser.Signature;
                user.JobTitle = appUser.JobTitle;
                user.City = appUser.City;
                user.ProfilePicture = appUser.ProfilePicture;
                user.UserCreationStatus = appUser.UserCreationStatus;
                user.UserCreationStatusDesc = appUser.UserCreationStatusDesc;
                user.EmailConfirmed = appUser.EmailConfirmed;
                users.Add(user);
            }

            return (Result.Success(), users);
        }

        public async Task<Result> VerifyPasswordAsync(string email, string password)
        {
            var user = await _userManager.FindByEmailAsync(email);
            if (user == null)
            {
                return Result.Failure("User does not");
            }
            var validatePassword = await _userManager.CheckPasswordAsync(user, password);
            if (validatePassword)
            {
                return Result.Success("Password verification successful");
            }
            return Result.Failure("Password verification failed");
        }
    }

}


public static Mock<UserManager<TUser>> MockUserManager<TUser>() where TUser : class
{
    var store = new Mock<IUserStore<TUser>>();
    var mgr = new Mock<UserManager<TUser>>(store.Object, null, null, null, null, null, null, null, null);
    mgr.Object.UserValidators.Add(new UserValidator<TUser>());
    mgr.Object.PasswordValidators.Add(new PasswordValidator<TUser>());
    return mgr;
}

public static Mock<RoleManager<TRole>> MockRoleManager<TRole>() where TRole : class
{
    IRoleStore<TRole> store = new Mock<IRoleStore<TRole>>().Object;
    List<IRoleValidator<TRole>> roles = new();
    roles.Add(new RoleValidator<TRole>());
    return new Mock<RoleManager<TRole>>(store, roles, MockLookupNormalizer(),
        new IdentityErrorDescriber(), null);
}


public static ILookupNormalizer MockLookupNormalizer()
{
    var normalizerFunc = new Func<string, string>(i =>
    {
        if (i == null)
        {
            return null;
        }
        else
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(i)).ToUpperInvariant();
        }
    });
    var lookupNormalizer = new Mock<ILookupNormalizer>();
    lookupNormalizer.Setup(i => i.NormalizeName(It.IsAny<string>())).Returns(normalizerFunc);
    lookupNormalizer.Setup(i => i.NormalizeEmail(It.IsAny<string>())).Returns(normalizerFunc);
    return lookupNormalizer.Object;
}


using Application.Common.Models;
using Application.Extensions;
using Application.Interfaces;
using Application.Users.Commands;
using Domain.Entities;
using Domain.Enum;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Moq;
using Test.Data;
using Test.Mocks;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace Test.Users.Commands;
public class AddUserCommandHandlerTests
{
    private readonly Mock<ISecretHasher> _mockSecretHasher;
    private readonly Mock<IEmailSender> _mockEmailSender;
    private readonly Mock<UserManager<User>> _mockUserManager;
    private readonly Mock<RoleManager<IdentityRole>> _mockRoleManager;

    private readonly List<User> _users;
    public AddUserCommandHandlerTests()
    {
        _mockSecretHasher = new Mock<ISecretHasher>();
        _mockEmailSender = new Mock<IEmailSender>();

        _users = UserFaker.GenerateValidUsers();

        _mockUserManager = UserManagerMock.MockUserManager<User>();

        _mockUserManager.Setup(x => x.Users).Returns(DbContextMock.GetQueryableMockDbSet(_users));

        _mockSecretHasher.Setup(x => x.Hash(It.IsAny<string>())).Returns("12345678*a");
        _mockRoleManager = UserManagerMock.MockRoleManager<IdentityRole>();

    }

    [Fact]
    public async Task HandleValidUser_ShouldReturnSuccess_WhenUserCreatedSuccessfully()
    {
        // Arrange
        _mockUserManager.Setup(x => x.FindByEmailAsync(It.IsAny<string>()))
            .ReturnsAsync((User?)null);
        _mockUserManager.Setup(x => x.CreateAsync(It.IsAny<User>(), It.IsAny<string>()))
            .ReturnsAsync(IdentityResult.Success);

        AddUserCommandHandler commandHandler = new(
            _mockEmailSender.Object,
            _mockUserManager.Object,
            _mockRoleManager.Object,
            _mockSecretHasher.Object);

        var command = new AddUserCommand
        {
            User = UserFaker.GenerateValidDto(),
            UserRole = UserRole.Admin,
        };

        // Act
        Result result = await commandHandler.Handle(command, CancellationToken.None);

        // Assert
        Assert.True(result.Succeeded);
        Assert.NotNull(result.Entity); // Check if a user object is returned
        Assert.Contains("created successfully", result.Message);
    }

    [Fact]
    public async Task HandleInvalidUser_ShouldReturnFailure_WhenUserCreationFails()
    {
        // Arrange
        _mockUserManager.Setup(x => x.FindByEmailAsync(It.IsAny<string>()))
            .ReturnsAsync((User)null);
        _mockUserManager.Setup(x => x.CreateAsync(It.IsAny<User>(), It.IsAny<string>()))
            .ReturnsAsync(IdentityResult.Failed(new IdentityError { Description = "Test error" }));

        AddUserCommandHandler commandHandler = new(
            _mockEmailSender.Object,
            _mockUserManager.Object,
            _mockRoleManager.Object,
            _mockSecretHasher.Object);

        var command = new AddUserCommand
        {k
            User = UserFaker.GenerateInvalidDto(),
            UserRole = UserRole.Admin,
        };

        // Act
        var result = await commandHandler.Handle(command, CancellationToken.None);

        // Assert
        Assert.False(result.Succeeded);
        Assert.Null(result.Entity);
        Assert.Contains("creation failed", result.Message);
        Assert.False(result.Succeeded);

    }
    [Fact]
    public async Task HandleInvalidUser_ShouldReturnFailure_WhenUserAlreadyExists()
    {
        // Arrange
        _mockUserManager.Setup(x => x.FindByEmailAsync(It.IsAny<string>()))
            .ReturnsAsync(new User { Email = "test@example.com" });

        AddUserCommandHandler commandHandler = new(
            _mockEmailSender.Object,
            _mockUserManager.Object,
            _mockRoleManager.Object,
            _mockSecretHasher.Object);

        var addUserCommand = new AddUserCommand
        {
            User = UserFaker.GenerateValidDto(),//specify your own email
            UserRole = UserRole.Admin,
        };

        // Act
        var result = await commandHandler.Handle(addUserCommand, CancellationToken.None);

        // Assert
        Assert.False(result.Succeeded);
        Assert.Equal("User Already Exists", result.Message);
    }
}